{% extends 'AtotrukisMainBundle::layout.html.twig' %}
{#{{  form(form) }}#}
{% block content %}
<style>
   #map-canvas {
        height: 300px;
        width: 400px;
        margin: 0px;
        padding: 0px
    }
    #inputField{
        height:50px;
    }
    .controls {
        margin-top: 16px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        padding: 0 11px 0 13px;
        width: 400px;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        text-overflow: ellipsis;
    }

    #pac-input:focus {
        border-color: #4d90fe;
        margin-left: -1px;
        padding-left: 14px;  /* Regular padding-left + 1. */
        width: 401px;
    }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

    #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }

    }

</style>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.

    function initialize() {

        var markers = [];
        var map = new google.maps.Map(document.getElementById('map-canvas'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(56.256216, 21.246148),
                new google.maps.LatLng(53.943853, 25.937310));
        map.fitBounds(defaultBounds);

        // Create the search box and link it to the UI element.
        var input = /** @type {HTMLInputElement} */(
                document.getElementById('pac-input'));
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        var searchBox = new google.maps.places.SearchBox(
                /** @type {HTMLInputElement} */(input));

        // [START region_getplaces]
        // Listen for the event fired when the user selects an item from the
        // pick list. Retrieve the matching places for that item.
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            for (var i = 0, marker; marker = markers[i]; i++) {
                marker.setMap(null);
            }

            // For each place, get the icon, place name, and location.
            markers = [];
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                };

                // Create a marker for each place.
                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location,
                });
                document.getElementById("createEventForm_map").value = marker.position;
                //alert(document.getElementById("createEventForm_map").value);
                //$("#createEventForm_map").val(marker.position);
                //alert(marker.position);

                //markers = [];
                markers.push(marker);
                bounds.extend(place.geometry.location);
            }

            map.fitBounds(bounds);
            map.setZoom(16);
        });
        // [END region_getplaces]

        // Bias the SearchBox results towards places that are within the bounds of the
        // current map's viewport.
        google.maps.event.addListener(map, 'bounds_changed', function() {
            var bounds = map.getBounds();
            searchBox.setBounds(bounds);

            //map.setCenter(pt);

        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);

</script>
<style>
    #target {
        width: 345px;
    }
</style>




{{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

{{ form_label(form.name, 'Pavadinimas') }}
{{ form_errors(form.name) }}
{{ form_widget(form.name, { 'attr': {'class': "form-control", 'placeholder': "Pavadinimas"} }) }}

{{ form_label(form.description, 'Aprašymas') }}
{{ form_errors(form.description) }}
{{ form_widget(form.description, { 'attr': {'class': "form-control", 'placeholder': "Aprašymas"} }) }}

{{ form_label(form.startDate, 'Pradžios laikas') }}
{{ form_errors(form.startDate) }}
{{ form_widget(form.startDate, { 'attr': {'class': "form-control", 'placeholder': "Pradžios laikas"} }) }}

{{ form_label(form.endDate, 'Pabaigos laikas') }}
{{ form_errors(form.endDate) }}
{{ form_widget(form.endDate, { 'attr': {'class': "form-control", 'placeholder': "Pabaigos laikas"} }) }}

{#{{ form_label(form.map, 'Adresas') }}#}
{#{{ form_errors(form.map) }}#}
{{ form_widget(form.map, { 'attr': {'class': "form-control", 'placeholder': "Adresas"} }) }}

<div id="inputField">
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
</div>
<div id="map-canvas"></div>

{{ form_label(form.city, 'Miestas') }}
{{ form_errors(form.city) }}
{{ form_widget(form.city, { 'attr': {'class': "form-control", 'placeholder': "Miestas"} }) }}

<input type="submit" value="Sukurti" class="btn red-btn sign-up-btn"/>

{{ form_rest(form) }}

<script type="text/javascript">

    function stopRKey(evt) {
        var evt = (evt) ? evt : ((event) ? event : null);
        var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
        if ((evt.keyCode == 13) && (node.type=="text"))  {return false;}
    }

    document.onkeypress = stopRKey;

</script>
{% endblock %}